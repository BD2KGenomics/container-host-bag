---
- name: Get Architecture3 jar file
  get_url: url=https://seqwaremaven.oicr.on.ca/artifactory/simple/seqware-release/io/cancer/collaboratory/pancancer-arch-3/{{ pancancer_arch3_version }}/pancancer-arch-3-{{ pancancer_arch3_version }}.jar dest=/home/ubuntu/pancancer-arch-3-{{ pancancer_arch3_version }}.jar

# The "endless" flag for the worker is not a true/false, it's "--endless" or "".
- name: Conditionally turn endless_worker_flag on
  set_fact: endless_worker_flag=" --endless "
  when: endless_worker is defined and endless_worker

- name: Conditionally turn endless_worker_flag off
  set_fact: endless_worker_flag=""
  when: endless_worker is not defined or not endless_worker

- name: Get kill-worker script
  template: src=kill_worker_daemon.j2 dest=/home/ubuntu/kill_worker_daemon.sh

- name: Get run-worker script
  template: src=run_worker_daemon.j2 dest=/home/ubuntu/run_worker_daemon.sh

- name: queueHost is
  debug: var={{ queueHost }}

- name: Template workerConfig
  template: src=workerConfig.j2 dest=/home/ubuntu/workerConfig.ini owner=ubuntu

- name: Create .seqware directory
  file: path=/home/ubuntu/.seqware state=directory owner=ubuntu
  when: seqware_use_custom_settings is defined and seqware_use_custom_settings

- name: Copy base custom seqware settings
  copy: src=../files/seqware_settings.ini dest=/home/ubuntu/.seqware/settings owner=ubuntu
  when: seqware_use_custom_settings is defined and seqware_use_custom_settings

- name: Uncomment the custom seqware settings, IF you've requested that.
  replace: dest=/home/ubuntu/workerConfig.ini regexp='^(\#seqware-)(.*)$' replace='seqware-\2' backup=yes owner=ubuntu
  when: seqware_use_custom_settings is defined and seqware_use_custom_settings

- name: Check for ~/.aws/config
  local_action: stat path=/home/ubuntu/.aws/config
  register: stat_aws_config

- name: Copy over config for S3, if it exists
  sudo_user: 'ubuntu'
  copy: src=/home/ubuntu/.aws/config dest=/home/ubuntu/.aws/config
  when: stat_aws_config.stat.exists==true

- name: Check for ~/.aws/credentials
  local_action: stat path=/home/ubuntu/.aws/credentials
  register: stat_aws_creds

- name: Copy over credentials for S3, if it exists
  sudo_user: 'ubuntu'
  copy: src=/home/ubuntu/.aws/credentials dest=/home/ubuntu/.aws/credentials
  when: stat_aws_creds.stat.exists==true

- name: Check for ~/.gnos/gnos.pem
  local_action: stat path=/home/ubuntu/.gnos/gnos.pem
  register: stat_gnos

- name: Copy over GNOS key, if it exists
  sudo_user: 'ubuntu'
  copy: src=/home/ubuntu/.gnos/gnos.pem dest=/home/ubuntu/.gnos/gnos.pem
  when: stat_gnos.stat.exists==true

- name: Run worker as daemon
  sudo: true
  shell: chdir=/home/ubuntu nohup bash /home/ubuntu/run_worker_daemon.sh &
